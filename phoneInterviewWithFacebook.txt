/**
 * a and b are both SORTED arrays of integers. Each contains n sorted integers.
 * a has length 2*n, with the last n slots empty, and b has just n elements.
 * This method merges the elements from b into a, in place, without dynamic memory
 * allocation. Optimize for speed.
 *
 * For example, a = [ 1, 5, 6, 9, _, _, _, _ ] b = [3, 4, 7, 10]
 */
void inplace_merge(int* a, int* b, int n);

function inplace_merge(a,b,n){
    for(int i=n-1; i>=0; i--){
        var p = findLowest(b,a[i]);
        if(p>0){
            for(int j= p; j<b.legnth; j++)
            {
                a[i+n-j] = b[j];
            }
            b.splice(j,0);
        }
        else
        {
            a[n+i]=a[i];
        }
    }
}

function findLowest(a, c){
  for(int i=0; i<a.length, i++){
    if(i<a[i]) return i;
    }
}


/**
 * Given a string, returns a string with the order of the words reversed.
 *
 * For example, "dog bites man" becomes "man bites dog"
 */
reverse_words(string $input) { }
char *reverse_words(char *input) { }
std::string reverse_words(std::string input) { }


function reverse_words(input){
  var n = input.length;
  var tmp = '';
  var a = input.split(' ');
  for(int i=0; i<n/2; i++){
    tmp = a[i];
    a[i]= a[n-i];
    a[n-i] = tmp;

  }
    return String.join(a, ' ');
}

o(1) for time.


function reverse_words(input){
  var n = input.length;
  var sb = new stringBuilder();
  var s=n, e=n;
  for(int i=n-1; i>=0; i--){
    if(input[i]==' '){
        if(s!=e){
            sb.append(input.subString(s,e-s));
            sb.append(' ' );
        }
        e = i;
        s=i;
    }
    else{
       s = i;
    }
  }
sb.append(input.subString(0,e-0));
  return sb.toString();
}